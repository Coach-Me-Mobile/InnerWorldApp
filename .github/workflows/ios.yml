name: iOS CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_to_testflight:
        description: 'Deploy to TestFlight'
        required: false
        default: false
        type: boolean

jobs:
  build:
    name: Build iOS App
    runs-on: macos-14
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'
      
      - name: Build
        run: |
          cd ios
          xcodebuild \
            -project InnerWorld.xcodeproj \
            -scheme InnerWorld \
            -destination "generic/platform=iOS" \
            -configuration Debug \
            CODE_SIGNING_ALLOWED=NO \
            build

  deploy:
    name: Deploy to TestFlight
    runs-on: macos-14
    needs: build
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy_to_testflight == 'true'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'
      
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Check deployment trigger
        run: |
          if [ "${{ github.event.inputs.deploy_to_testflight }}" == "true" ]; then
            echo "🚀 Manual TestFlight deployment triggered"
          else
            echo "🔄 Automatic TestFlight deployment (main branch)"
          fi
      
      - name: Get Apple credentials
        run: |
          echo "🔍 Retrieving Apple credentials from AWS Secrets Manager..."
          
          # Get Apple Team ID with error handling
          if APPLE_SECRETS=$(aws secretsmanager get-secret-value \
            --secret-id "innerworld-prod/apple/signin-key" \
            --query SecretString --output text 2>/dev/null); then
            
            APPLE_TEAM_ID=$(echo "$APPLE_SECRETS" | jq -r '.team_id // empty')
            
            # Check if team ID is valid (not empty, null, or placeholder)
            if [[ -n "$APPLE_TEAM_ID" && "$APPLE_TEAM_ID" != "null" && "$APPLE_TEAM_ID" != "YOUR_TEAM_ID" ]]; then
              echo "✅ Retrieved valid Apple Team ID: $APPLE_TEAM_ID"
              echo "APPLE_TEAM_ID=$APPLE_TEAM_ID" >> $GITHUB_ENV
              echo "HAS_VALID_TEAM_ID=true" >> $GITHUB_ENV
              
              # Also store Apple Client ID for later use
              APPLE_CLIENT_ID=$(echo "$APPLE_SECRETS" | jq -r '.client_id // empty')
              echo "APPLE_CLIENT_ID=$APPLE_CLIENT_ID" >> $GITHUB_ENV
              echo "🎯 Apple Client ID: $APPLE_CLIENT_ID"
            else
              echo "⚠️  Invalid or placeholder Team ID found: '$APPLE_TEAM_ID'"
              echo "HAS_VALID_TEAM_ID=false" >> $GITHUB_ENV
            fi
          else
            echo "⚠️  Failed to retrieve Apple secrets - will use automatic signing"
            echo "HAS_VALID_TEAM_ID=false" >> $GITHUB_ENV
          fi
          
          # Get App Store Connect API key with error handling
          if ASC_SECRETS=$(aws secretsmanager get-secret-value \
            --secret-id "innerworld-prod/appstoreconnect/api-key" \
            --query SecretString --output text 2>/dev/null); then
            
            ASC_KEY_ID=$(echo "$ASC_SECRETS" | jq -r '.key_id // empty')
            ASC_ISSUER_ID=$(echo "$ASC_SECRETS" | jq -r '.issuer_id // empty')
            
            # Check if App Store Connect credentials are valid (not empty, null, or placeholder)
            if [[ -n "$ASC_KEY_ID" && "$ASC_KEY_ID" != "null" && "$ASC_KEY_ID" != "YOUR_KEY_ID" && \
                  -n "$ASC_ISSUER_ID" && "$ASC_ISSUER_ID" != "null" && "$ASC_ISSUER_ID" != "YOUR_ISSUER_ID" ]]; then
              echo "🔑 App Store Connect Key ID: $ASC_KEY_ID"
              echo "🏢 App Store Connect Issuer ID: $ASC_ISSUER_ID"
              
              # Create App Store Connect API key file
              mkdir -p ~/.appstoreconnect/private_keys
              echo "$ASC_SECRETS" | jq -r '.private_key' > ~/.appstoreconnect/private_keys/AuthKey_${ASC_KEY_ID}.p8
              
              # Verify the key file was created successfully
              if [[ -f ~/.appstoreconnect/private_keys/AuthKey_${ASC_KEY_ID}.p8 ]]; then
                echo "✅ App Store Connect API key file created successfully"
              else
                echo "❌ Failed to create App Store Connect API key file"
              fi
              
              echo "ASC_KEY_ID=$ASC_KEY_ID" >> $GITHUB_ENV
              echo "ASC_ISSUER_ID=$ASC_ISSUER_ID" >> $GITHUB_ENV
              echo "HAS_ASC_CREDENTIALS=true" >> $GITHUB_ENV
            else
              echo "⚠️  Invalid or placeholder App Store Connect credentials"
              echo "   Key ID: '$ASC_KEY_ID'"
              echo "   Issuer ID: '$ASC_ISSUER_ID'"
              echo "HAS_ASC_CREDENTIALS=false" >> $GITHUB_ENV
            fi
          else
            echo "⚠️  Failed to retrieve App Store Connect secrets"
            echo "HAS_ASC_CREDENTIALS=false" >> $GITHUB_ENV
          fi
      
      - name: Import Apple certificates
        run: |
          echo "🔐 Setting up code signing..."
          
          # Create temporary keychain
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          
          # Import certificates from GitHub secrets
          if [ -n "${{ secrets.APPLE_CERTIFICATE_P12_BASE64 }}" ]; then
            echo "📱 Importing Apple Distribution certificate from GitHub secrets..."
            echo "${{ secrets.APPLE_CERTIFICATE_P12_BASE64 }}" | base64 --decode > certificate.p12
            security import certificate.p12 -k build.keychain -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
            echo "✅ Certificate imported from GitHub"
            
            # Install provisioning profile
            if [ -n "${{ secrets.APPLE_PROVISIONING_PROFILE_BASE64 }}" ]; then
              echo "📋 Installing provisioning profile from GitHub secrets..."
              mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
              echo "${{ secrets.APPLE_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/InnerWorld.mobileprovision
              echo "✅ Provisioning profile installed from GitHub"
            fi
            echo "HAS_CERTIFICATES=true" >> $GITHUB_ENV
            
          else
            echo "⚠️  No certificates found in AWS or GitHub - will build without signing"
            echo "HAS_CERTIFICATES=false" >> $GITHUB_ENV
          fi
      
      - name: Build and archive for TestFlight
        run: |
          cd ios
          
          # Build version info
          BUILD_NUMBER="${GITHUB_SHA:0:8}"
          VERSION_NUMBER="$(date '+%Y.%m.%d')"
          
          echo "📱 Building iOS app..."
          echo "Build: $BUILD_NUMBER"
          echo "Version: $VERSION_NUMBER"
          echo "Has valid team ID: ${HAS_VALID_TEAM_ID:-false}"
          echo "Has certificates: ${HAS_CERTIFICATES:-false}"
          echo "Has ASC credentials: ${HAS_ASC_CREDENTIALS:-false}"
          
          # Determine signing strategy based on available credentials
          if [[ "${HAS_VALID_TEAM_ID}" == "true" && "${HAS_ASC_CREDENTIALS}" == "true" ]]; then
            echo "🔐 Using automatic code signing with App Store Connect API authentication"
            echo "   Team ID: $APPLE_TEAM_ID"
            echo "   Using API Key: $ASC_KEY_ID"
            echo "   📝 Note: No manual certificates needed - API handles everything automatically!"
            
            # Archive with automatic signing using App Store Connect API authentication
            xcodebuild \
              -project InnerWorld.xcodeproj \
              -scheme InnerWorld \
              -destination "generic/platform=iOS" \
              -configuration Release \
              -archivePath InnerWorld.xcarchive \
              -allowProvisioningUpdates \
              -authenticationKeyPath ~/.appstoreconnect/private_keys/AuthKey_${ASC_KEY_ID}.p8 \
              -authenticationKeyID "$ASC_KEY_ID" \
              -authenticationKeyIssuerID "$ASC_ISSUER_ID" \
              MARKETING_VERSION="$VERSION_NUMBER" \
              CURRENT_PROJECT_VERSION="$BUILD_NUMBER" \
              CODE_SIGN_STYLE=Automatic \
              DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
              archive
            
            # Export IPA
            echo "📦 Creating export options..."
            cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>signingStyle</key>
              <string>automatic</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
          </dict>
          </plist>
          EOF
            
            echo "📤 Exporting archive to IPA..."
            xcodebuild \
              -exportArchive \
              -archivePath InnerWorld.xcarchive \
              -exportPath export \
              -exportOptionsPlist ExportOptions.plist
            
            # Upload to TestFlight
            echo "🚀 Uploading to TestFlight..."
            xcrun altool --upload-app \
              --type ios \
              --file export/InnerWorld.ipa \
              --apiKey "$ASC_KEY_ID" \
              --apiIssuer "$ASC_ISSUER_ID" \
              --verbose
            
            echo "✅ Deployed to TestFlight: Build $BUILD_NUMBER, Version $VERSION_NUMBER"
            
          elif [[ "${HAS_VALID_TEAM_ID}" == "true" && "${HAS_CERTIFICATES}" == "true" ]]; then
            echo "🔐 Using manual code signing with Team ID: $APPLE_TEAM_ID"
            
            # Archive with manual code signing
            xcodebuild \
              -project InnerWorld.xcodeproj \
              -scheme InnerWorld \
              -destination "generic/platform=iOS" \
              -configuration Release \
              -archivePath InnerWorld.xcarchive \
              MARKETING_VERSION="$VERSION_NUMBER" \
              CURRENT_PROJECT_VERSION="$BUILD_NUMBER" \
              CODE_SIGN_STYLE=Manual \
              DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
              PROVISIONING_PROFILE_SPECIFIER="com.thoughtmanifold.InnerWorld AppStore" \
              CODE_SIGN_IDENTITY="iPhone Distribution" \
              archive
            
            echo "✅ iOS app archived successfully (manual signing)!"
            echo "📋 Manual TestFlight upload required (missing App Store Connect API key or provisioning profile)"
            
          else
            echo "⚠️  Building without code signing for verification only..."
            echo "Missing credentials for App Store Connect API signing:"
            [[ "${HAS_VALID_TEAM_ID}" != "true" ]] && echo "   - Valid Apple Team ID (AWS Secrets Manager)"
            [[ "${HAS_ASC_CREDENTIALS}" != "true" ]] && echo "   - App Store Connect API credentials (AWS Secrets Manager)"
            
            # Build without code signing
            xcodebuild \
              -project InnerWorld.xcodeproj \
              -scheme InnerWorld \
              -destination "generic/platform=iOS" \
              -configuration Release \
              MARKETING_VERSION="$VERSION_NUMBER" \
              CURRENT_PROJECT_VERSION="$BUILD_NUMBER" \
              CODE_SIGNING_ALLOWED=NO \
              build
            
            echo "✅ iOS app builds successfully!"
            echo ""
            echo "📋 To enable TestFlight deployment, ensure these are configured:"
            echo "   AWS Secrets (✅ CONFIGURED):"
            echo "     - innerworld-prod/apple/signin-key (with valid team_id)"
            echo "     - innerworld-prod/appstoreconnect/api-key (with key_id, issuer_id, private_key)"
            echo ""
            echo "   ✅ MODERN APPROACH: Using App Store Connect API for automatic signing"
            echo "   📝 No GitHub certificate secrets needed - API manages certificates automatically!"
            echo "   📝 This is Apple's recommended approach for CI/CD in 2024"
          fi
      
      - name: Cleanup keychain
        if: always()
        run: |
          security delete-keychain build.keychain || true
