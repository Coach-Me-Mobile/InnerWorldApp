# CI/CD Pipeline for InnerWorldApp
# Comprehensive code quality, security, and iOS build checks

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/*, hotfix/*, infra/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  XCODE_VERSION: '16.0'
  IOS_SIMULATOR: 'iPhone 16 Pro'
  IOS_VERSION: '18.0'

jobs:
  # Security and secret scanning
  security-scan:
    name: Security & Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better secret detection

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
        continue-on-error: true

  # Code quality and linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for TODO/FIXME comments
        run: |
          echo "Checking for TODO/FIXME comments..."
          if grep -r "TODO\|FIXME\|XXX" --include="*.swift" . 2>/dev/null; then
            echo "::warning::Found TODO/FIXME comments in code"
          else
            echo "No TODO/FIXME comments found"
          fi

  # Privacy and compliance checks
  privacy-compliance:
    name: Privacy & Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for hardcoded crisis resources
        run: |
          echo "Checking for hardcoded crisis resources..."
          # Exclude legitimate uses in TermsView and comments
          if grep -r "988\|1-800-" --include="*.swift" . 2>/dev/null | grep -v "TermsView\|//.*" | grep -v "Terms.*Conditions"; then
            echo "::error::Found hardcoded crisis hotline numbers. These should be externalized."
            exit 1
          elif grep -r "suicide.*[0-9]\|crisis.*[0-9]" --include="*.swift" . 2>/dev/null | grep -v "TermsView\|//.*" | grep -v "Terms.*Conditions"; then
            echo "::error::Found hardcoded crisis resources with numbers. These should be externalized."
            exit 1
          else
            echo "No hardcoded crisis resources found (legitimate terms excluded)"
          fi

      - name: Check for hardcoded API endpoints
        run: |
          echo "Checking for hardcoded API endpoints..."
          # Only flag actual API endpoints, not Apple documentation URLs
          if grep -r "https://api\.\|https://.*\.amazonaws\.com\|https://.*\.openai\.com" --include="*.swift" . 2>/dev/null | grep -v "//.*https\|//.*http"; then
            echo "::warning::Found potential hardcoded API endpoints"
          else
            echo "No hardcoded API endpoints found"
          fi

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate API endpoint configurations
        run: |
          echo "Validating API endpoint configurations..."
          if [ -f "scripts/validate-api-endpoints.sh" ]; then
            bash scripts/validate-api-endpoints.sh
          else
            echo "No API validation script found, skipping..."
          fi

  # Documentation checks
  documentation:
    name: Documentation & Changelog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README exists
        run: |
          if [ ! -f "README.md" ]; then
            echo "::error::README.md is missing"
            exit 1
          else
            echo "README.md found"
          fi

      - name: Check infrastructure documentation
        run: |
          if [ ! -f "infrastructure/README.md" ]; then
            echo "::warning::Infrastructure README.md is missing"
          else
            echo "Infrastructure documentation found"
          fi

  # iOS build and testing (only if iOS project exists)
  ios-build:
    name: iOS Build & Test
    runs-on: macos-14
    needs: [security-scan, code-quality]
    if: always() && needs.security-scan.result == 'success' && needs.code-quality.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Validate iOS project structure
        run: |
          echo "üîç Validating iOS project structure..."
          if [ ! -d "ios/InnerWorld.xcodeproj" ]; then
            echo "‚ùå ERROR: Xcode project not found"
            exit 1
          fi
          echo "‚úÖ iOS project structure validated"

      - name: Build iOS App (ARKit - Build Verification Only)
        run: |
          echo "üèóÔ∏è Building ARKit iOS App for CI verification..."
          echo "üìù Note: ARKit apps require physical devices for full testing"
          
          # Build for generic iOS device (no simulator testing for ARKit)
          cd ios
          set -o pipefail && xcodebuild \
            -project InnerWorld.xcodeproj \
            -scheme InnerWorld \
            -destination "generic/platform=iOS" \
            -configuration Debug \
            CODE_SIGNING_ALLOWED=NO \
            build | xcpretty || (echo "Build failed" && exit 1)
          
          echo "‚úÖ iOS build verification completed successfully"

  # Summary job
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, privacy-compliance, integration-tests, documentation, ios-build]
    if: always()
    steps:
      - name: CI Summary
        run: |
          echo "CI/CD Pipeline completed"
          echo "Security scan: ${{ needs.security-scan.result }}"
          echo "Code quality: ${{ needs.code-quality.result }}"
          echo "Privacy compliance: ${{ needs.privacy-compliance.result }}"
          echo "Integration tests: ${{ needs.integration-tests.result }}"
          echo "Documentation: ${{ needs.documentation.result }}"
          echo "iOS build: ${{ needs.ios-build.result }}"