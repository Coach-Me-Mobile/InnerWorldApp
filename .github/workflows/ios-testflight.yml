name: iOS TestFlight Deployment

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ios/**'
      - '.github/workflows/ios-testflight.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'ios/**'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      deploy_to_testflight:
        description: 'Deploy to TestFlight'
        required: false
        default: false
        type: boolean

env:
  XCODE_VERSION: '15.1'  # Update to your preferred Xcode version
  IOS_PROJECT_PATH: './ios'
  SCHEME_NAME: 'InnerWorld'
  CONFIGURATION: 'Release'

jobs:
  build-and-test:
    name: Build and Test iOS App
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
        
    - name: Cache SPM dependencies
      uses: actions/cache@v3
      with:
        path: |
          ios/DerivedData
          ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-spm-${{ hashFiles('ios/**/*.resolved', 'ios/**/Package.swift') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Install Apple Certificate and Provisioning Profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # Import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    - name: Create AWS Amplify configuration
      env:
        COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
        COGNITO_USER_POOL_CLIENT_ID: ${{ secrets.COGNITO_USER_POOL_CLIENT_ID }}
        COGNITO_IDENTITY_POOL_ID: ${{ secrets.COGNITO_IDENTITY_POOL_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        # Create Amplify configuration file
        cat > ${IOS_PROJECT_PATH}/InnerWorld/amplifyconfiguration.json << EOF
        {
          "auth": {
            "plugins": {
              "awsCognitoAuthPlugin": {
                "UserAgent": "aws-amplify-cli/0.1.0",
                "Version": "0.1.0",
                "IdentityManager": {
                  "Default": {}
                },
                "CredentialsProvider": {
                  "CognitoIdentity": {
                    "Default": {
                      "PoolId": "${COGNITO_IDENTITY_POOL_ID}",
                      "Region": "${AWS_REGION}"
                    }
                  }
                },
                "CognitoUserPool": {
                  "Default": {
                    "PoolId": "${COGNITO_USER_POOL_ID}",
                    "AppClientId": "${COGNITO_USER_POOL_CLIENT_ID}",
                    "Region": "${AWS_REGION}"
                  }
                },
                "Auth": {
                  "Default": {
                    "authenticationFlowType": "USER_SRP_AUTH",
                    "socialProviders": [],
                    "usernameAttributes": ["EMAIL"],
                    "signupAttributes": ["EMAIL"],
                    "passwordProtectionSettings": {
                      "passwordPolicyMinLength": 8,
                      "passwordPolicyCharacters": []
                    },
                    "mfaConfiguration": "OFF",
                    "mfaTypes": ["SMS"],
                    "verificationMechanisms": ["EMAIL"]
                  }
                }
              }
            }
          }
        }
        EOF

    - name: Build iOS app
      run: |
        cd $IOS_PROJECT_PATH
        
        # Clean build folder
        xcodebuild clean \
          -project InnerWorld.xcodeproj \
          -scheme $SCHEME_NAME \
          -configuration $CONFIGURATION
        
        # Build for testing
        xcodebuild build-for-testing \
          -project InnerWorld.xcodeproj \
          -scheme $SCHEME_NAME \
          -configuration $CONFIGURATION \
          -destination 'platform=iOS Simulator,name=iPhone 15 Pro'
          
    - name: Run unit tests
      run: |
        cd $IOS_PROJECT_PATH
        
        # Run tests
        xcodebuild test-without-building \
          -project InnerWorld.xcodeproj \
          -scheme $SCHEME_NAME \
          -configuration $CONFIGURATION \
          -destination 'platform=iOS Simulator,name=iPhone 15 Pro'

  deploy-testflight:
    name: Deploy to TestFlight
    runs-on: macos-latest
    needs: build-and-test
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_testflight == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
        
    - name: Install Apple Certificate and Provisioning Profile
      env:
        DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_BASE64 }}
        DISTRIBUTION_P12_PASSWORD: ${{ secrets.DISTRIBUTION_P12_PASSWORD }}
        DISTRIBUTION_PROVISION_PROFILE_BASE64: ${{ secrets.DISTRIBUTION_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/distribution_certificate.p12
        PP_PATH=$RUNNER_TEMP/distribution_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # Import certificate and provisioning profile from secrets
        echo -n "$DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$DISTRIBUTION_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$DISTRIBUTION_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    - name: Create AWS Amplify configuration
      env:
        COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
        COGNITO_USER_POOL_CLIENT_ID: ${{ secrets.COGNITO_USER_POOL_CLIENT_ID }}
        COGNITO_IDENTITY_POOL_ID: ${{ secrets.COGNITO_IDENTITY_POOL_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        # Create Amplify configuration file
        cat > ${IOS_PROJECT_PATH}/InnerWorld/amplifyconfiguration.json << EOF
        {
          "auth": {
            "plugins": {
              "awsCognitoAuthPlugin": {
                "UserAgent": "aws-amplify-cli/0.1.0",
                "Version": "0.1.0",
                "IdentityManager": {
                  "Default": {}
                },
                "CredentialsProvider": {
                  "CognitoIdentity": {
                    "Default": {
                      "PoolId": "${COGNITO_IDENTITY_POOL_ID}",
                      "Region": "${AWS_REGION}"
                    }
                  }
                },
                "CognitoUserPool": {
                  "Default": {
                    "PoolId": "${COGNITO_USER_POOL_ID}",
                    "AppClientId": "${COGNITO_USER_POOL_CLIENT_ID}",
                    "Region": "${AWS_REGION}"
                  }
                },
                "Auth": {
                  "Default": {
                    "authenticationFlowType": "USER_SRP_AUTH",
                    "socialProviders": [],
                    "usernameAttributes": ["EMAIL"],
                    "signupAttributes": ["EMAIL"],
                    "passwordProtectionSettings": {
                      "passwordPolicyMinLength": 8,
                      "passwordPolicyCharacters": []
                    },
                    "mfaConfiguration": "OFF",
                    "mfaTypes": ["SMS"],
                    "verificationMechanisms": ["EMAIL"]
                  }
                }
              }
            }
          }
        }
        EOF

    - name: Increment build number
      run: |
        cd $IOS_PROJECT_PATH
        
        # Get current build number and increment it
        CURRENT_BUILD=$(xcodebuild -project InnerWorld.xcodeproj -showBuildSettings -configuration $CONFIGURATION | grep CURRENT_PROJECT_VERSION | tr -d 'CURRENT_PROJECT_VERSION =' | xargs)
        NEW_BUILD=$((CURRENT_BUILD + 1))
        
        # Update build number
        xcrun agvtool new-version -all $NEW_BUILD

    - name: Build and archive
      run: |
        cd $IOS_PROJECT_PATH
        
        # Create archive
        xcodebuild archive \
          -project InnerWorld.xcodeproj \
          -scheme $SCHEME_NAME \
          -configuration $CONFIGURATION \
          -archivePath $PWD/build/InnerWorld.xcarchive \
          -allowProvisioningUpdates

    - name: Export IPA
      run: |
        cd $IOS_PROJECT_PATH
        
        # Create export options plist
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>method</key>
          <string>app-store</string>
          <key>teamID</key>
          <string>${{ secrets.APPLE_TEAM_ID }}</string>
          <key>uploadBitcode</key>
          <false/>
          <key>uploadSymbols</key>
          <true/>
          <key>compileBitcode</key>
          <false/>
        </dict>
        </plist>
        EOF
        
        # Export IPA
        xcodebuild -exportArchive \
          -archivePath $PWD/build/InnerWorld.xcarchive \
          -exportOptionsPlist ExportOptions.plist \
          -exportPath $PWD/build

    - name: Upload to TestFlight
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
      run: |
        cd $IOS_PROJECT_PATH
        
        # Decode and save API key
        echo -n "$APP_STORE_CONNECT_API_KEY_BASE64" | base64 --decode > AuthKey.p8
        
        # Upload to TestFlight
        xcrun altool --upload-app \
          --type ios \
          --file "build/InnerWorld.ipa" \
          --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
          --apiIssuer "$APP_STORE_CONNECT_API_ISSUER_ID" \
          --verbose

    - name: Clean up keychain and certificates
      if: always()
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
        rm -f $RUNNER_TEMP/build_certificate.p12 || true
        rm -f $RUNNER_TEMP/distribution_certificate.p12 || true
        rm -f $RUNNER_TEMP/build_pp.mobileprovision || true
        rm -f $RUNNER_TEMP/distribution_pp.mobileprovision || true
        rm -f ${IOS_PROJECT_PATH}/AuthKey.p8 || true
